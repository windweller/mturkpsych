var triadTurk = (function($, glo, alertify){	'use strict';	var phaseChangeHtml = "<div class='row'><div class='large-12 columns'>"+          "<h4>Next Phase Ahead</h4>"+          "<br><br><p>Great! You've finished the practice trials. Please continue on to the experimental trials.</p>" +          "</div></div><br>";    var endingHtml = "<div class='row'><div class='large-12 columns'>"+          "<h4>Congratulations!</h4>"+          "<br><br><p>You have completed the first two tasks. Please close this window and return to Qualtrics to complete the demographic questionaire.</p>" +          "</div></div><br>";	if ($('#trial').length != 0) {		TriadExperiment(10, "practice");		alertify.alert(phaseChangeHtml);		TriadExperiment(48,"exp");		alertify.alert(endingHtml);	}  /**  * Functions used to send out Ajax  * testing: triadTurk.sendOutData(  * {phase:"phase", verbTop:"A", verbTopCate:"B", verbLeft:"B",     verbLeftCate:"C", verbRight:"C", verbRightCate:"D", predict:"E",     reactionTime:"rt", response:"response"});  **/  var triadURIPromise = glo.triadURIPromise;  function sendOutData(dataObject) {       return triadURIPromise.then(function(uris) {        console.log(uris);         return Q($.ajax({            url: uris.triadResultUpload._2,            type: uris.triadResultUpload._1,            datatype: "json",            contentType: 'application/json; charset=UTF-8',            data: JSON.stringify(data)          }))          .then(function(result) {            console.log(result);          })          .fail(function(jqXHR) {            glo.ajaxFailureHandle(jqXHR, uris.triadResultUpload._2);          });      });   }	var TriadExperiment = function(numTrials, phase) {		var num = 0;		var wordon, // time word is presented			listening = false;			var groupA = ["embarrass","oust","applaud","halve","discredit","show","change","span","animate","provoke","update","project","rewrite","envision","recognize","forbid","fuel","remember,flout","compound"];		var groupB = 	["immerse","exchange","curry","meld","reassign","smooth","assemble","devastate","classify","route","dump","exact","nail","frame","implicate","commit","tender","scratch","supplant","seize"];		var groupC = ["prevail","burden","work","compete","hurtle","spiral","erupt","interact","scurry","soak","decorate","pop","apply","grapple","dash","dine","stall","gravitate","apologize","cry"];		var groupD =	["destine","poise","mean","reply","reason","want","pledge","try","explain","fear","concede","purport","presume","skirt","intone","stipulate","expect","warn","estimate","guess"];		var stims = [			["A", "A", "A", "1"], ["A", "A", "B", "0"], ["A", "B", "B", "1"], ["A", "B", "A", "0"], 			["A", "A", "A", "1"], ["A", "A", "C", "0"], ["A", "C", "C", "1"], ["A", "C", "A", "0"], 			["A", "A", "A", "1"], ["A", "A", "D", "0"], ["A", "D", "D", "1"], ["A", "D", "A", "0"], 					["B", "B", "B", "1"], ["B", "B", "A", "0"], ["B", "A", "A", "1"], ["B", "A", "B", "0"], 			["B", "B", "B", "1"], ["B", "B", "C", "0"], ["B", "C", "C", "1"], ["B", "C", "B", "0"], 			["B", "B", "B", "1"], ["B", "B", "D", "0"], ["B", "D", "D", "1"], ["B", "D", "B", "0"], 					["C", "C", "C", "1"], ["C", "C", "B", "0"], ["C", "B", "B", "1"], ["C", "B", "C", "0"], 			["C", "C", "C", "1"], ["C", "C", "A", "0"], ["C", "A", "A", "1"], ["C", "A", "C", "0"], 			["C", "C", "C", "1"], ["C", "C", "D", "0"], ["C", "D", "D", "1"], ["C", "D", "C", "0"], 					["D", "D", "D", "1"], ["D", "D", "B", "0"], ["D", "B", "B", "1"], ["D", "B", "D", "0"], 			["D", "D", "D", "1"], ["D", "D", "C", "0"], ["D", "C", "C", "1"], ["D", "C", "D", "0"], 			["D", "D", "D", "1"], ["D", "D", "A", "0"], ["D", "A", "A", "1"], ["D", "A", "D", "0"]			];				stims = _.shuffle(stims);				var next = function(numTrials) {			if (num===numTrials) {				finish();			}			else {				num = num + 1;				stim = stims.shift();							A = getWord(stim[0]);				B = getWord(stim[1]);				C = getWord(stim[2]);										var v = setTimeout(function(){show_word1( A )},1000);				//show_word1( stim[0] );				var t = setTimeout(function(){show_word2( B, C) },1800);				wordon = new Date().getTime();				listening = true;			}		};			var getWord = function(group) {			switch (group) {				case "A" :					return groupA[Math.floor(Math.random() * (groupA.length -1))];				case "B" :					return groupB[Math.floor(Math.random() * (groupB.length -1))];				case "C" :					return groupC[Math.floor(Math.random() * (groupC.length -1))];				case "D" :					return groupD[Math.floor(Math.random() * (groupD.length -1))];				default:					return; 				}		};			var response_handler = function(e) {			if (!listening) return;			var keyCode = e.keyCode,				response;			switch (keyCode) {				case 37:					// "left arrow"					response="L";					break;				case 39:					// "right arrow"					response="R";					break;				default:					response = "";					break;			}			if (response.length>0) {				listening = false;				var hit = response == stim[1];				var rt = String(new Date().getTime() - wordon);      // val fields = List("phase","verbTop", "verbTopCate", "verbLeft", "verbLeftCate",        // "verbRight", "verbRightCate", "predict", "reactionTime", "response")				util.sendOutData({'phase': phase									'verbTop': A,									 'verbTopCate' : stim[0],									 'verbLeft':B,									 'verbLeftCate':stim[1],									 'verbRight':C,									 'verbRightCate' : stim[2],									 'predict': stim[3]									 'reactionTime':rt									 'response': response									 }									   );				remove_word();				next();			}		};		var finish = function() {			$("body").unbind("keydown", response_handler); // Unbind keys			currentview = new Questionnaire();		};			var show_word1 = function(text) {			d3.select("#stim")				.append("div")				.attr("id","word")				.text(text);		};		var show_word2 = function(text1, text2) {			d3.select("#stim2")				.append("div")				.attr("id","word")				.text(text1 + " " + text2 );		};			var remove_word = function() {			d3.select("#word").remove();			d3.select("#word").remove();		};		// Register the response handler that is defined above to handle any		// key down events.		$("body").focus().keydown(response_handler); 		// Start the test		next();	};	}(jQuery, mturk.global_access, alertify));